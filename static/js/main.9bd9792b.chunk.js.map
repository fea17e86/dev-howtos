{"version":3,"sources":["app/app.component.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","links","setLinks","useEffect","a","fetch","response","text","redmeaMd","extractLink","values","exec","push","url","tags","split","console","log","style","display","flexDirection","alignItems","width","margin","marginBottom","map","i","key","href","target","rel","tag","background","borderRadius","padding","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+MAQe,SAASA,IAAO,IAAD,EACFC,mBAAiB,IADf,mBACrBC,EADqB,KACdC,EADc,KAsB5B,OAnBAC,qBAAU,YACR,uCAAC,oCAAAC,EAAA,sEACwBC,MAAM,yBAD9B,cACOC,EADP,gBAEwBA,EAASC,OAFjC,OAMC,IAJMC,EAFP,OAGOC,EAAc,iCACdR,EAAQ,GAEmC,QAAzCS,EAASD,EAAYE,KAAKH,KAChCP,EAAMW,KAAK,CACTL,KAAMG,EAAO,GACbG,IAAKH,EAAO,GACZI,KAAMJ,EAAO,GAAGK,MAAM,OAG1Bb,EAASD,GACTe,QAAQC,IAAIhB,GAdb,4CAAD,yDAgBC,IAGD,yBACEiB,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,UACZC,MAAO,QACPC,OAAQ,SAGV,6BAASL,MAAO,CAAEM,aAAc,QAAhC,UACA,8BACGvB,EAAMwB,KAAI,WAA4BC,GAA5B,IAAGb,EAAH,EAAGA,IAAKN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,KAAd,OACT,yBAAKa,IAAG,UAAKD,EAAL,YAAUb,GAAOK,MAAO,CAAEM,aAAc,UAC9C,yBAAKN,MAAO,CAAEM,aAAc,SAC1B,uBAAGI,KAAMf,EAAKgB,OAAO,SAASC,IAAI,uBAC/BvB,GAAQM,IAGb,6BACGC,EAAKW,KAAI,SAACM,EAAKL,GAAN,OACR,0BACEC,IAAG,UAAKD,EAAL,YAAUK,GACbb,MAAO,CACLC,QAAS,eACTa,WAAY,OACZC,aAAc,OACdC,QAAS,kCACTC,YAAa,SAGdJ,aCjDCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC5C,EAAD,OAEF6C,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.9bd9792b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\ninterface Link {\r\n  url: string;\r\n  text: string;\r\n  tags: string[];\r\n}\r\n\r\nexport default function App() {\r\n  const [links, setLinks] = useState<Link[]>([]);\r\n\r\n  useEffect(() => {\r\n    (async function fetchReadmeMd() {\r\n      const response = await fetch(\"/dev-howtos/README.md\");\r\n      const redmeaMd = await response.text();\r\n      const extractLink = /(?:\\[(.+)\\])?\\((.+)\\)\\[(.+)\\]/g;\r\n      const links = [];\r\n      let values;\r\n      while ((values = extractLink.exec(redmeaMd)) !== null) {\r\n        links.push({\r\n          text: values[1],\r\n          url: values[2],\r\n          tags: values[3].split(\",\"),\r\n        });\r\n      }\r\n      setLinks(links);\r\n      console.log(links);\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"stretch\",\r\n        width: \"900px\",\r\n        margin: \"auto\",\r\n      }}\r\n    >\r\n      <section style={{ marginBottom: \"2em\" }}>header</section>\r\n      <main>\r\n        {links.map(({ url, text, tags }: Link, i) => (\r\n          <div key={`${i}_${url}`} style={{ marginBottom: \"1.5em\" }}>\r\n            <div style={{ marginBottom: \".5em\" }}>\r\n              <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {text || url}\r\n              </a>\r\n            </div>\r\n            <div>\r\n              {tags.map((tag, i) => (\r\n                <span\r\n                  key={`${i}_${tag}`}\r\n                  style={{\r\n                    display: \"inline-block\",\r\n                    background: \"#ddd\",\r\n                    borderRadius: \".5em\",\r\n                    padding: \"calc(.5em - 2px) .5em .5em .5em\",\r\n                    marginRight: \".5em\",\r\n                  }}\r\n                >\r\n                  {tag}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"app\";\nimport * as serviceWorker from \"serviceWorker\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}