{"version":3,"sources":["components/article.component.tsx","components/skelton.component.tsx","components/tag.component.tsx","app/app.component.tsx","app/index.ts","serviceWorker.ts","index.tsx"],"names":["contentUrl","header","tags","onTagClick","style","props","Style","HeaderStyle","href","target","rel","sort","map","tag","i","Tag","Component","key","value","onClick","marginBottom","Article","Skeleton","width","args","InteractiveStyle","display","background","borderRadius","padding","marginRight","cursor","Header","selectedTags","sortedTags","useMemo","Array","from","a","b","valueA","has","valueB","marginTop","color","opacity","useState","links","setLinks","Set","setTags","setSelectedTags","filteredLinks","filter","size","contains","length","selectTag","useEffect","fetch","response","text","redmeaMd","extractLink","nextTags","values","exec","link","url","split","push","forEach","add","console","log","flexDirection","alignItems","margin","selectedTag","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe57f5e6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Tag } from \"components\";\r\n\r\nexport namespace Article {\r\n  export function Component({\r\n    contentUrl,\r\n    header,\r\n    tags,\r\n    onTagClick,\r\n    style = {},\r\n    ...props\r\n  }: Props) {\r\n    return (\r\n      <article {...props} style={{ ...Style, ...style }}>\r\n        <header style={HeaderStyle}>\r\n          <a href={contentUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {header}\r\n          </a>\r\n        </header>\r\n        <div>\r\n          {tags.sort().map((tag, i) => (\r\n            <Tag.Component\r\n              key={`${i}_${tag}`}\r\n              value={tag}\r\n              onClick={onTagClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </article>\r\n    );\r\n  }\r\n\r\n  export interface Props\r\n    extends React.DetailedHTMLProps<\r\n      React.HTMLAttributes<HTMLElement>,\r\n      HTMLElement\r\n    > {\r\n    contentUrl: string;\r\n    header: string;\r\n    tags: string[];\r\n    onTagClick: (tag: any) => void;\r\n  }\r\n\r\n  export const Style = { marginBottom: \"1.5em\" };\r\n\r\n  export const HeaderStyle = { marginBottom: \".5em\" };\r\n}\r\n","import React from \"react\";\r\nimport RLSkeleton from \"react-loading-skeleton\";\r\n\r\nexport namespace Skeleton {\r\n  export function Component() {\r\n    return (\r\n      <>\r\n        <RLSkeleton width=\"100%\" />\r\n        <RLSkeleton width=\"80%\" />\r\n        <RLSkeleton width=\"100%\" />\r\n        <RLSkeleton width=\"50%\" />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport namespace Tag {\r\n  export function Component({ onClick, style, value, ...props }: Props) {\r\n    function handleClick(...args: any[]) {\r\n      if (onClick) {\r\n        onClick(value, ...args);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <span\r\n        {...props}\r\n        onClick={handleClick}\r\n        style={{\r\n          ...Style,\r\n          ...(typeof onClick === \"function\" ? InteractiveStyle : {}),\r\n          ...style,\r\n        }}\r\n      >\r\n        {value}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  export interface Props\r\n    extends React.DetailedHTMLProps<\r\n      React.HTMLAttributes<HTMLSpanElement>,\r\n      HTMLSpanElement\r\n    > {\r\n    value: any;\r\n    onClick?: (...params: any[]) => void;\r\n  }\r\n\r\n  export const Style = {\r\n    display: \"inline-block\",\r\n    background: \"#ddd\",\r\n    borderRadius: \".5em\",\r\n    padding: \"calc(.5em - 2px) .5em .5em .5em\",\r\n    marginRight: \".5em\",\r\n  };\r\n\r\n  export const InteractiveStyle = {\r\n    cursor: \"pointer\",\r\n  };\r\n}\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\n\r\nimport { Article, Tag } from \"components\";\r\n\r\ninterface Link {\r\n  url: string;\r\n  text: string;\r\n  tags: string[];\r\n}\r\n\r\nexport namespace App {\r\n  export function Component() {\r\n    const [links, setLinks] = useState<Link[]>([]);\r\n    const [tags, setTags] = useState<Set<string>>(new Set<string>());\r\n    const [selectedTags, setSelectedTags] = useState<Set<string>>(\r\n      new Set<string>()\r\n    );\r\n\r\n    const filteredLinks = useMemo(\r\n      () =>\r\n        links.filter(({ tags }) => {\r\n          if (selectedTags.size === 0) {\r\n            return true;\r\n          }\r\n\r\n          let contains: boolean = false;\r\n          let i: number = 0;\r\n          while (\r\n            (contains = selectedTags.has(tags[i])) === false &&\r\n            i < tags.length\r\n          ) {\r\n            i++;\r\n          }\r\n\r\n          return contains;\r\n        }),\r\n      [links, selectedTags]\r\n    );\r\n\r\n    useEffect(() => {\r\n      (async function fetchReadmeMd() {\r\n        const response = await fetch(\"/dev-howtos/README.md\");\r\n        const redmeaMd = await response.text();\r\n        const extractLink = /(?:\\[(.+)\\])?\\((.+)\\)\\[(.+)\\]/g;\r\n        const links = [];\r\n        const nextTags = new Set<string>(new Set<string>());\r\n        let values;\r\n        while ((values = extractLink.exec(redmeaMd)) !== null) {\r\n          const link = {\r\n            text: values[1],\r\n            url: values[2],\r\n            tags: values[3].split(\",\"),\r\n          };\r\n          links.push(link);\r\n          link.tags.forEach((tag) => {\r\n            nextTags.add(tag);\r\n          });\r\n        }\r\n        setLinks(links);\r\n        setTags(nextTags);\r\n        console.log(links, nextTags);\r\n      })();\r\n    }, []);\r\n\r\n    function selectTag(tag: string) {\r\n      setSelectedTags(\r\n        (selectedTags) => new Set<string>([...Array.from(selectedTags), tag])\r\n      );\r\n    }\r\n\r\n    function toggleTag(tag: string) {\r\n      setSelectedTags((selectedTags) => {\r\n        if (selectedTags.has(tag)) {\r\n          return new Set<string>([\r\n            ...Array.from(selectedTags).filter(\r\n              (selectedTag) => selectedTag !== tag\r\n            ),\r\n          ]);\r\n        } else {\r\n          return new Set<string>([...Array.from(selectedTags), tag]);\r\n        }\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"stretch\",\r\n          width: \"900px\",\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <Header\r\n          tags={tags}\r\n          selectedTags={selectedTags}\r\n          onTagClick={toggleTag}\r\n        />\r\n        <main>\r\n          {filteredLinks.map(({ url, text, tags }: Link, i) => (\r\n            <Article.Component\r\n              key={`${i}_${url}`}\r\n              contentUrl={url}\r\n              header={text || url}\r\n              tags={tags}\r\n              onTagClick={selectTag}\r\n            />\r\n          ))}\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export function Header({ tags, selectedTags, onTagClick }: HeaderProps) {\r\n    const sortedTags = useMemo(() => {\r\n      return Array.from(tags).sort((a: string, b: string) => {\r\n        const valueA = selectedTags.has(a) ? 1 : 0;\r\n        const valueB = selectedTags.has(b) ? 1 : 0;\r\n        if (valueA !== valueB) {\r\n          return valueB - valueA;\r\n        }\r\n\r\n        if (a < b) {\r\n          return -1;\r\n        }\r\n        if (a > b) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    }, [tags, selectedTags]);\r\n    return (\r\n      <section style={{ marginBottom: \"2em\", marginTop: \"5em\" }}>\r\n        {sortedTags.map((tag, i) => (\r\n          <Tag.Component\r\n            key={`${i}_${tag}`}\r\n            value={tag}\r\n            onClick={onTagClick}\r\n            style={\r\n              selectedTags.has(tag)\r\n                ? { background: \"blue\", color: \"white\" }\r\n                : { opacity: 0.6 }\r\n            }\r\n          />\r\n        ))}\r\n      </section>\r\n    );\r\n  }\r\n\r\n  export interface HeaderProps {\r\n    onTagClick: (tag: any) => void;\r\n    selectedTags: Set<string>;\r\n    tags: Set<string>;\r\n  }\r\n}\r\n","import { App } from \"./app.component\";\r\n\r\nexport default App.Component;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"app\";\nimport * as serviceWorker from \"serviceWorker\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}